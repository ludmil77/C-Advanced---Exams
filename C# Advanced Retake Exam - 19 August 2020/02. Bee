using System;
using System.Collections.Generic;
using System.Numerics;
using System.Linq;
using System.Text.RegularExpressions;
using System.ComponentModel;

namespace _02._Bee
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int size = int.Parse(Console.ReadLine());
            char[,] matrix = new char[size, size];
            int currentRow = 0;
            int currentCol = 0;
            int flower = 0;
            bool isGoesOut = false;
            for(int row = 0; row < size; row++)
            {
                char[] chars = Console.ReadLine().ToCharArray();
                {
                    for(int col = 0; col < size; col++)
                    {
                        matrix[row, col] = chars[col];
                        if(matrix[row, col] == 'B')
                        {
                            currentRow = row;
                            currentCol = col;
                        }
                    }
                }
            }
            string command = Console.ReadLine();
            while(command != "End")
            {
                
                if(command == "up")
                {
                    if(currentRow <= 0)
                    {
                        isGoesOut = true;
                        break;
                    }
                    if(currentRow > 0)
                    {
                        matrix[currentRow, currentCol] = '.';
                        currentRow--;
                    }
                }
                if(command == "down")
                {
                    if (currentRow >= size - 1)
                    {
                        isGoesOut = true;
                        break;
                    }
                    if (currentRow < size - 1)
                    {
                        matrix[currentRow, currentCol] = '.';
                        currentRow++;
                    }
                }
                if (command == "left")
                {
                    if (currentCol <= 0)
                    {
                        isGoesOut = true;
                        break;
                    }
                    if (currentCol > 0)
                    {
                        matrix[currentRow, currentCol] = '.';
                        currentCol--;
                    }
                }
                if (command == "right")
                {
                    if (currentCol >= size - 1)
                    {
                        isGoesOut = true;
                        break;
                    }
                    if (currentCol < size - 1)
                    {
                        matrix[currentRow, currentCol] = '.';
                        currentCol++;
                    }
                }
                
                if (matrix[currentRow, currentCol] == 'O')
                {
                    if(command == "up")
                    {
                        if (currentRow <= 0)
                        {
                            isGoesOut = true;
                            break;
                        }
                        if (currentRow > 0)
                        {
                            matrix[currentRow, currentCol] = '.';
                            currentRow--;
                        }
                    }
                    if (command == "down")
                    {
                        if (currentRow >= size - 1)
                        {
                            isGoesOut = true;
                            break;
                        }
                        if (currentRow < size - 1)
                        {
                            matrix[currentRow, currentCol] = '.';
                            currentRow++;
                        }
                    }
                    if (command == "left")
                    {
                        if (currentCol <= 0)
                        {
                            isGoesOut = true;
                            break;
                        }
                        if (currentCol > 0)
                        {
                            matrix[currentRow, currentCol] = '.';
                            currentCol--;
                        }
                    }
                    if (command == "right")
                    {
                        if (currentCol >= size - 1)
                        {
                            isGoesOut = true;
                            break;
                        }
                        if (currentCol < size - 1)
                        {
                            matrix[currentRow, currentCol] = '.';
                            currentCol++;
                        }
                    }

                }
                if (matrix[currentRow, currentCol] == 'f')
                {
                    flower++;
                    matrix[currentRow, currentCol] = '.';
                }
                command = Console.ReadLine();
            }
            if(isGoesOut)
            {
                Console.WriteLine("The bee got lost!");
            }
            if (flower < 5)
            {
                Console.WriteLine($"The bee couldn't pollinate the flowers, she needed {5 - flower} flowers more");
            }
            if(flower >= 5)
            {
                Console.WriteLine($"Great job, the bee managed to pollinate {flower} flowers!");
            }
            for(int row = 0; row < size; row++)
            {
                for(int col = 0; col < size; col++)
                {
                    matrix[currentRow, currentCol] = 'B';
                    if(isGoesOut)
                    {
                        matrix[currentRow, currentCol] = '.';
                    }
                    Console.Write(matrix[row, col]);
                }
                Console.WriteLine();
            }
        }
    }
}
